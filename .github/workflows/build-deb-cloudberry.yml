# --------------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements. See the NOTICE file distributed
# with this work for additional information regarding copyright
# ownership. The ASF licenses this file to You under the Apache
# License, Version 2.0 (the "License"); you may not use this file
# except in compliance with the License. You may obtain a copy of the
# License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# --------------------------------------------------------------------
# GitHub Actions Workflow: Apache Cloudberry Build Pipeline
# --------------------------------------------------------------------
# Description:
#
#   This workflow builds, tests, and packages Apache Cloudberry on
#   Rocky Linux 9. It ensures artifact integrity, performs installation
#   tests, validates key operations, and provides detailed test reports,
#   including handling for ignored test cases.
#
# Workflow Overview:
# 1. **Check Skip**:
#    - Dynamically determines if the workflow should run based on CI skip flags.
#    - Evaluates the following fields for skip flags:
#      - **Pull Request Events**: PR title and PR body.
#      - **Push Events**: Commit message of the head commit.
#    - Supports the following skip patterns (case-insensitive):
#      - `[skip ci]`
#      - `[ci skip]`
#      - `[no ci]`
#    - **Example Usage**:
#      - Add `[skip ci]` to a commit message, PR title, or body to skip the workflow.
#
# 2. **Build Job**:
#    - Configures and builds Apache Cloudberry.
#    - Supports debug build configuration via ENABLE_DEBUG flag.
#    - Runs unit tests and verifies build artifacts.
#    - Creates RPM packages (regular or debug), source tarballs, and logs.
#    - **Key Artifacts**: RPM package, source tarball, build logs.
#
# 3. **RPM Install Test Job**:
#    - Verifies RPM integrity and installs Cloudberry.
#    - Validates successful installation.
#    - **Key Artifacts**: Installation logs, verification results.
#
# 4. **Test Job (Matrix)**:
#    - Executes a test matrix to validate different scenarios.
#    - Creates a demo cluster and runs installcheck tests.
#    - Parses and reports test results, including failed and ignored tests.
#    - Detects and analyzes any core dumps generated during tests.
#    - **Key Features**:
#      - Regression diffs are displayed if found, aiding quick debugging.
#      - Both failed and ignored test names are logged and reported.
#      - Core dumps are analyzed using GDB for stack traces.
#    - **Key Artifacts**: Test logs, regression files, test summaries, core analyses.
#
# 5. **Report Job**:
#    - Aggregates job results into a final report.
#    - Sends failure notifications if any step fails.
#
# Execution Environment:
# - **Runs On**: ubuntu-22.04 with Rocky Linux 9 containers.
# - **Resource Requirements**:
#   - Disk: Minimum 20GB free space.
#   - Memory: Minimum 8GB RAM.
#   - CPU: Recommended 4+ cores.
#
# Triggers:
# - Push to `main` branch.
# - Pull requests to `main` branch.
# - Manual workflow dispatch.
#
# Container Images:
# - **Build**: `apache/incubator-cloudberry:cbdb-build-rocky9-latest`
# - **Test**: `apache/incubator-cloudberry:cbdb-test-rocky9-latest`
#
# Artifacts:
# - RPM Package          (retention: ${{ env.LOG_RETENTION_DAYS }} days).
# - Source Tarball       (retention: ${{ env.LOG_RETENTION_DAYS }} days).
# - Logs and Test Results (retention: ${{ env.LOG_RETENTION_DAYS }} days).
# - Regression Diffs      (retention: ${{ env.LOG_RETENTION_DAYS }} days).
# - Core Dump Analyses    (retention: ${{ env.LOG_RETENTION_DAYS }} days).
#
# Notes:
# - Supports concurrent job execution.
# - Includes robust skip logic for pull requests and pushes.
# - Handles ignored test cases, ensuring results are comprehensive.
# - Provides detailed logs and error handling for failed and ignored tests.
# - Analyzes core dumps generated during test execution.
# - Supports debug builds with preserved symbols.
# --------------------------------------------------------------------

name: Apache Cloudberry Debian Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, edited]
  workflow_dispatch:  # Manual trigger

# Note: Step details, logs, and artifacts require users to be logged into GitHub
# even for public repositories. This is a GitHub security feature and cannot
# be overridden by permissions.

permissions:
  # READ permissions allow viewing repository contents
  contents: read      # Required for checking out code and reading repository files

  # READ permissions for packages (Container registry, etc)
  packages: read      # Allows reading from GitHub package registry

  # WRITE permissions for actions includes read access to:
  # - Workflow runs
  # - Artifacts (requires GitHub login)
  # - Logs (requires GitHub login)
  actions: write

  # READ permissions for checks API:
  # - Step details visibility (requires GitHub login)
  # - Check run status and details
  checks: read

  # READ permissions for pull request metadata:
  # - PR status
  # - Associated checks
  # - Review states
  pull-requests: read

env:
  LOG_RETENTION_DAYS: 7
  ENABLE_DEBUG: false

jobs:

  ## ======================================================================
  ## Job: build
  ## ======================================================================

  build:
    name: Build Apache Cloudberry DEB
    env:
      JOB_TYPE: build
    needs: [check-skip]
    runs-on: ubuntu-22.04
    timeout-minutes: 120
    outputs:
      build_timestamp: ${{ steps.set_timestamp.outputs.timestamp }}

    container:
      image: ghcr.io/leborchuk/cloudberry-devops-release:cbdb-build-ubuntu22.04-latest
      options: >-
        --user root
        -h cdw

    steps:
      - name: Set build timestamp
        if: needs.check-skip.outputs.should_skip != 'true'
        id: set_timestamp  # Add an ID to reference this step
        run: |
          timestamp=$(date +'%Y%m%d_%H%M%S')
          echo "timestamp=$timestamp" | tee -a "$GITHUB_OUTPUT"  # Use GITHUB_OUTPUT for job outputs
          echo "BUILD_TIMESTAMP=$timestamp" | tee -a "$GITHUB_ENV" # Also set as environment variable

      - name: Checkout Apache Cloudberry
        if: needs.check-skip.outputs.should_skip != 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: true

      - name: Checkout CI Build/Test Scripts
        if: needs.check-skip.outputs.should_skip != 'true'
        uses: actions/checkout@v4
        with:
          repository: apache/cloudberry-devops-release
          ref: main
          path: cloudberry-devops-release
          fetch-depth: 1

      - name: Move cloudberry-devops-release directory
        if: needs.check-skip.outputs.should_skip != 'true'
        run: |
          set -eo pipefail
          if ! mv "${GITHUB_WORKSPACE}"/cloudberry-devops-release "${GITHUB_WORKSPACE}"/..; then
            echo "::error::Container initialization failed"
            exit 1
          fi

      - name: Cloudberry Environment Initialization
        if: needs.check-skip.outputs.should_skip != 'true'
        env:
          LOGS_DIR: build-logs
        run: |
          set -eo pipefail
          if ! su - gpadmin -c "/tmp/init_system.sh"; then
            echo "::error::Container initialization failed"
            exit 1
          fi

          mkdir -p "${LOGS_DIR}/details"
          chown -R gpadmin:gpadmin .
          chmod -R 755 .
          chmod 777 "${LOGS_DIR}"

          df -kh /
          rm -rf /__t/*
          df -kh /

          df -h | tee -a "${LOGS_DIR}/details/disk-usage.log"
          free -h | tee -a "${LOGS_DIR}/details/memory-usage.log"

          {
            echo "=== Environment Information ==="
            uname -a
            df -h
            free -h
            env
          } | tee -a "${LOGS_DIR}/details/environment.log"

          echo "SRC_DIR=${GITHUB_WORKSPACE}" | tee -a "$GITHUB_ENV"

      - name: Generate Build Job Summary Start
        run: |
          {
            echo "# Build Job Summary"
            echo "## Environment"
            echo "- Start Time: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            echo "- ENABLE_DEBUG: ${{ env.ENABLE_DEBUG }}"
            echo "- OS Version: $(lsb_release -sd)"
            echo "- GCC Version: $(gcc --version | head -n1)"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Run Apache Cloudberry configure script
        if: needs.check-skip.outputs.should_skip != 'true'
        env:
          SRC_DIR: ${{ github.workspace }}
        run: |
          set -eo pipefail

          export BUILD_DESTINATION=${SRC_DIR}/debian/build

          chmod +x "${SRC_DIR}"/../cloudberry-devops-release/build_automation/cloudberry/scripts/configure-cloudberry.sh
          if ! time su - gpadmin -c "cd ${SRC_DIR} && SRC_DIR=${SRC_DIR} ENABLE_DEBUG=${{ env.ENABLE_DEBUG }} BUILD_DESTINATION=${BUILD_DESTINATION} ${SRC_DIR}/../cloudberry-devops-release/build_automation/cloudberry/scripts/configure-cloudberry.sh"; then
            echo "::error::Configure script failed"
            exit 1
          fi

      - name: Run Apache Cloudberry build script
        if: needs.check-skip.outputs.should_skip != 'true'
        env:
          SRC_DIR: ${{ github.workspace }}
        run: |
          set -eo pipefail

          export BUILD_DESTINATION=${SRC_DIR}/debian/build

          chmod +x "${SRC_DIR}"/../cloudberry-devops-release/build_automation/cloudberry/scripts/build-cloudberry.sh
          if ! time su - gpadmin -c "cd ${SRC_DIR} && SRC_DIR=${SRC_DIR} BUILD_DESTINATION=${BUILD_DESTINATION} ${SRC_DIR}/../cloudberry-devops-release/build_automation/cloudberry/scripts/build-cloudberry.sh"; then
            echo "::error::Build script failed"
            exit 1
          fi

          # copy sugar and xerces shared libraries
          if ! cp /usr/local/lib/libsigar.so ${BUILD_DESTINATION}/lib; then
            echo "::error::Copy libsigar.so failed"
            exit 1
          fi 

          if ! cp /usr/local/lib/libxerces* ${BUILD_DESTINATION}/lib; then
            echo "::error::Copy libxerces failed"
            exit 1
          fi

      - name: Verify build artifacts
        if: needs.check-skip.outputs.should_skip != 'true'
        run: |
          set -eo pipefail

          export BUILD_DESTINATION=${SRC_DIR}/debian/build

          echo "Verifying build artifacts..."
          {
            echo "=== Build Artifacts Verification ==="
            echo "Timestamp: $(date -u)"

            export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${BUILD_DESTINATION}/lib

            if [ ! -d "${BUILD_DESTINATION}" ]; then
              echo "::error::Build artifacts directory not found"
              exit 1
            fi

            # Verify critical binaries
            critical_binaries=(
              "${BUILD_DESTINATION}/bin/postgres"
              "${BUILD_DESTINATION}/bin/psql"
            )

            echo "Checking critical binaries..."
            for binary in "${critical_binaries[@]}"; do
              if [ ! -f "$binary" ]; then
                echo "::error::Critical binary missing: $binary"
                exit 1
              fi
              if [ ! -x "$binary" ]; then
                echo "::error::Binary not executable: $binary"
                exit 1
              fi
              echo "Binary verified: $binary"
              ls -l "$binary"
            done

            # Test binary execution
            echo "Testing binary execution..."
            if ! ${BUILD_DESTINATION}/bin/postgres --version; then
              echo "::error::postgres binary verification failed"
              exit 1
            fi
            if ! ${BUILD_DESTINATION}/bin/psql --version; then
              echo "::error::psql binary verification failed"
              exit 1
            fi

            echo "All build artifacts verified successfully"
          } 2>&1 | tee -a build-logs/details/build-verification.log

      - name: Create Source tarball, create DEB and verify artifacts
        env:
          CBDB_VERSION: 99.0.0
          BUILD_NUMBER: 1
          SRC_DIR: ${{ github.workspace }}
        run: |
          set -eo pipefail

          {
            echo "=== Artifact Creation Log ==="
            echo "Timestamp: $(date -u)"

            cp -r "${SRC_DIR}"/../cloudberry-devops-release/packaging/deb/ubuntu22.04/debian/* debian/
            chown -R "$(whoami)" debian

          # replace not supported symbols in version
          CBDB_VERSION=$(echo "$CBDB_VERSION" | sed "s/\//./g")
          CBDB_VERSION=$(echo "$CBDB_VERSION" | sed "s/_/-/g")
          
          echo "We will built ${CBDB_VERSION}"
          export BUILD_DESTINATION=${SRC_DIR}/debian/build
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${BUILD_DESTINATION}/lib

          if ! ${SRC_DIR}/../cloudberry-devops-release/scripts/build-deb.sh -v $CBDB_VERSION; then
            echo "::error::Build script failed"
            exit 1
          fi

          ARCH="amd64"
          CBDB_PKG_VERSION=${CBDB_VERSION}-${BUILD_NUMBER}.$(git --git-dir=.git rev-list HEAD --count).$(git --git-dir=.git rev-parse --short HEAD)

          echo "Produced artifacts"
          ls -l ../

          echo "Copy artifacts to directory sign/upload"
          mkdir ${SRC_DIR}/deb
          DEB_FILE="apache-cloudberry-db-incubating_${CBDB_PKG_VERSION}"_"${ARCH}".deb
          DBG_DEB_FILE="apache-cloudberry-db-incubating-dbgsym_${CBDB_PKG_VERSION}"_"${ARCH}".ddeb
          CHANGES_DEB_FILE="apache-cloudberry-db-incubating_${CBDB_PKG_VERSION}"_"${ARCH}".changes
          BUILDINFO_DEB_FILE="apache-cloudberry-db-incubating_${CBDB_PKG_VERSION}"_"${ARCH}".buildinfo
          DSC_DEB_FILE="apache-cloudberry-db-incubating_${CBDB_PKG_VERSION}".dsc
          SOURCE_FILE="apache-cloudberry-db-incubating_${CBDB_PKG_VERSION}".tar.xz
          cp ../"${DEB_FILE}" "${SRC_DIR}/deb"
          cp ../"${DBG_DEB_FILE}" "${SRC_DIR}/deb"
          cp ../"${CHANGES_DEB_FILE}" "${SRC_DIR}/deb"
          cp ../"${BUILDINFO_DEB_FILE}" "${SRC_DIR}/deb"
          cp ../"${DSC_DEB_FILE}" "${SRC_DIR}/deb"
          cp ../"${SOURCE_FILE}" "${SRC_DIR}/deb"
          mkdir "${SRC_DIR}/deb/debian"
          cp debian/changelog "${SRC_DIR}/deb/debian"


          # Get package information
          echo "Package Information:"
          dpkg --info "${DEB_FILE}"
          dpkg --contents "${DEB_FILE}"

          # Verify critical files in DEB
          echo "Verifying critical files in DEB..."
          for binary in "bin/postgres" "bin/psql"; do
            if ! dpkg --contents "${DEB_FILE}" | grep -q "${binary}$"; then
              echo "::error::Critical binary '${binary}' not found in DEB"
              exit 1
            fi
          done

          # Record checksums
          echo "Calculating checksums..."
          sha256sum "${DEB_FILE}" | tee -a build-logs/details/checksums.log

          echo "Artifacts created and verified successfully"


          } 2>&1 | tee -a build-logs/details/artifact-creation.log

      - name: Generate Build Job Summary End
        run: |
          {
            echo "## Build Results"
            echo "- End Time: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload build logs
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ env.BUILD_TIMESTAMP }}
          path: |
            build-logs/
          retention-days: ${{ env.LOG_RETENTION_DAYS }}

      - name: Upload Cloudberry DEB build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: apache-cloudberry-db-incubating-deb-build-artifacts
          retention-days: ${{ env.LOG_RETENTION_DAYS }}
          if-no-files-found: error
          path: |
            deb/*.deb
            deb/*.ddeb

      - name: Upload Cloudberry deb source build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: apache-cloudberry-db-incubating-source-build-artifacts
          retention-days: ${{ env.LOG_RETENTION_DAYS }}
          if-no-files-found: error
          path: |
            deb/*.tar.xz
